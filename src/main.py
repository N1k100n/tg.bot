# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã
from datetime import datetime
import locale
locale.setlocale (
  category = locale.LC_ALL,
  locale = "Russian"
)
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram_datepicker import Datepicker, DatepickerSettings

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "7501903523:AAFE9MIpzZ7sRY655iNrFoHZ27CXASCqya4"

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token = API_TOKEN)
dp = Dispatcher(bot, run_tasks_by_default = True)

# –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def _get_datepicker_settings():
  return DatepickerSettings(
    initial_view = "day",
    initial_date = datetime.now().date(),
    views = {
      "day": {
        "show_weekdays": True,
        "weekdays_labels": ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"],
        "header": ["days-title"],
        "footer": ["prev-month", "next-month"],
      },
      "month": {
        "months_labels": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
        "header": ["year"],
        "footer": []
      },
      "year": {
        "header": [],
        "footer": ["prev-years", "next-years"]
      }
    },
    labels = {
      "prev-years": "‚¨Ö",
      "next-years": "‚û°",
      "prev-month": "‚¨Ö",
      "next-month": "‚û°",
      "days-title": "üìÜ {month} {year}",
      "selected-day": "{day}",
      "selected-month": "{month}",
      "present-day": "{day}",
    },
    custom_actions = []
  )


# –ò–º—è –≥—Ä—É–ø–ø—ã
group_name = None


# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb = InlineKeyboardMarkup(row_width=5)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 1 –¥–æ 6
# number_buttons = [InlineKeyboardButton(text = str(i), callback_data = f'num_{i}') for i in range(1, 7)]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
time_buttons = [
  InlineKeyboardButton(text = "–ü–∞—Ä–∞ / –í—Ä–µ–º—è", callback_data = "time_0"),
  InlineKeyboardButton(text = "1. 08:00-09:40", callback_data = "time_1"),
  InlineKeyboardButton(text = "2. 08:00-09:40", callback_data = "time_2"),
  InlineKeyboardButton(text = "3. 08:00-09:40", callback_data = "time_3"),
  InlineKeyboardButton(text = "4. 08:00-09:40", callback_data = "time_4"),
  InlineKeyboardButton(text = "5. 08:00-09:40", callback_data = "time_5"),
  InlineKeyboardButton(text = "6. 08:00-09:40", callback_data = "time_6"),
]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
discipline_buttons = [
  InlineKeyboardButton(text = "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", callback_data = "discipline_0"),
  InlineKeyboardButton(text = "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏", callback_data = "discipline_1"),
  InlineKeyboardButton(text = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data = "discipline_2"),
  InlineKeyboardButton(text = " ", callback_data = "discipline_3"),
  InlineKeyboardButton(text = "–ë–∏–æ–ª–æ–≥–∏—è", callback_data = "discipline_4"),
  InlineKeyboardButton(text = "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data = "discipline_5"),
  InlineKeyboardButton(text = " ", callback_data = "discipline_6"),
]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
teacher_buttons = [
  InlineKeyboardButton(text = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data = "teacher_0"),
  InlineKeyboardButton(text = "–§–∞–º–∏–ª–∏—è –ò.–û.", callback_data = "teacher_1"),
  InlineKeyboardButton(text = "–§–∞–º–∏–ª–∏—è –ò.–û.", callback_data = "teacher_2"),
  InlineKeyboardButton(text = " ", callback_data = "teacher_3"),
  InlineKeyboardButton(text = "–§–∞–º–∏–ª–∏—è –ò.–û.", callback_data = "teacher_4"),
  InlineKeyboardButton(text = "–§–∞–º–∏–ª–∏—è –ò.–û.", callback_data = "teacher_5"),
  InlineKeyboardButton(text = " ", callback_data = "teacher_6"),
]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
cabinet_buttons = [
  InlineKeyboardButton(text = "–ê—É–¥–∏—Ç–æ—Ä–∏—è", callback_data = "cabinet_0"),
  InlineKeyboardButton(text = "303", callback_data = "cabinet_1"),
  InlineKeyboardButton(text = "311/203", callback_data = "cabinet_2"),
  InlineKeyboardButton(text = " ", callback_data = "cabinet_3"),
  InlineKeyboardButton(text = "–¥–∏—Å.", callback_data = "cabinet_4"),
  InlineKeyboardButton(text = "–¥–∏—Å.", callback_data = "cabinet_5"),
  InlineKeyboardButton(text = " ", callback_data = "cabinet_6"),
]

# –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–∑–º–µ—Ç–∫—É
for i in range(7):
  kb.add(time_buttons[i], discipline_buttons[i], teacher_buttons[i], cabinet_buttons[i])


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (/start)
@dp.message_handler(commands = ["start"])
async def send_welcome(message: Message):
  await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤
@dp.callback_query_handler(lambda call: call.data.startswith("teacher_"))
async def handle_teacher_button(call: types.CallbackQuery):
  teacher_number = call.data.split('_')[1]
  response_text = ""
  if teacher_number == '1' and True:
    response_text = "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"
  elif teacher_number == '2' and True:
    response_text = "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"
  elif teacher_number == '3' and False:
    response_text = ""
  elif teacher_number == '4' and True:
    response_text = "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"
  elif teacher_number == '5' and True:
    response_text = "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"
  elif teacher_number == '6' and False:
    response_text = ""
  await call.answer(response_text)
  await call.message.answer(response_text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤
@dp.callback_query_handler(lambda call: call.data.startswith("discipline_"))
async def handle_discipline_button(call: types.CallbackQuery):
  discipline_number = call.data.split('_')[1]
  response_text = ""
  if discipline_number == '1' and True:
    response_text = "–û–ü.11 –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏"
  elif discipline_number == '2' and True:
    response_text = "–û–£–î.13 –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
  elif discipline_number == '3' and False:
    response_text = ""
  elif discipline_number == '4' and True:
    response_text = "–û–£–î.08 –ë–∏–æ–ª–æ–≥–∏—è"
  elif discipline_number == '5' and True:
    response_text = "–û–£–î.09 –ì–µ–æ–≥—Ä–∞—Ñ–∏—è"
  elif discipline_number == '6' and False:
    response_text = ""
  await call.answer(response_text)
  await call.message.answer(response_text)


@dp.callback_query_handler(Datepicker.datepicker_callback.filter())
async def _process_datepicker(callback_query: CallbackQuery, callback_data: dict):
  global group_name
  datepicker = Datepicker(_get_datepicker_settings())
  _date = await datepicker.process(callback_query, callback_data)
  if _date:
    if group_name != None:
      await callback_query.message.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–∞ {_date.strftime("%d.%m.%Y")}:', reply_markup=kb)
  await callback_query.answer()


@dp.message_handler()
async def echo(message: Message):
  global group_name
  datepicker = Datepicker(_get_datepicker_settings())
  markup = datepicker.start_calendar()
  if False:
    await message.answer(f'–ì—Ä—É–ø–ø–∞ {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–µ—Å–ª–∏ –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –±—É–∫–≤—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)')
  else:
    group_name = message.text
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É: ", reply_markup=markup)


if __name__ == "__main__":
  executor.start_polling(dp, skip_updates = True)