# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã
from datetime import datetime
import locale
locale.setlocale (
  category = locale.LC_ALL,
  locale = "Russian"
)
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram_datepicker import Datepicker, DatepickerSettings
import sqlite3

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "7501903523:AAFE9MIpzZ7sRY655iNrFoHZ27CXASCqya4"

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token = API_TOKEN)
dp = Dispatcher(bot, run_tasks_by_default = True)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥
connection = sqlite3.connect('db/database.db')
cursor = connection.cursor()

# –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def _get_datepicker_settings():
  return DatepickerSettings(
    initial_view = "day",
    initial_date = datetime.now().date(),
    views = {
      "day": {
        "show_weekdays": True,
        "weekdays_labels": ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"],
        "header": ["days-title"],
        "footer": ["prev-month", "next-month"],
      },
      "month": {
        "months_labels": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
        "header": ["year"],
        "footer": []
      },
      "year": {
        "header": [],
        "footer": ["prev-years", "next-years"]
      }
    },
    labels = {
      "prev-years": "‚¨Ö",
      "next-years": "‚û°",
      "prev-month": "‚¨Ö",
      "next-month": "‚û°",
      "days-title": "üìÜ {month} {year}",
      "selected-day": "{day}",
      "selected-month": "{month}",
      "present-day": "{day}",
    },
    custom_actions = []
  )


# –ò–º—è –≥—Ä—É–ø–ø—ã
group_name = None

# –î–∞—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule_date = None

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb = InlineKeyboardMarkup(row_width=5)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (/start)
@dp.message_handler(commands = ["start"])
async def send_welcome(message: Message):
  await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä:")


# –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
def get_time_buttons():
  global group_name
  global schedule_date
  time_buttons = [InlineKeyboardButton(text = "–ü–∞—Ä–∞ / –í—Ä–µ–º—è", callback_data = "time_0")]
  for i in range(1, 7):
    cursor.execute(f'SELECT –í—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞ FROM –ü–∞—Ä—ã WHERE id = (SELECT –ü–∞—Ä–∞_{i}_id FROM –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ WHERE id = (SELECT –î–∞—Ç—ã.–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_id FROM –î–∞—Ç—ã JOIN –ì—Ä—É–ø–ø—ã ON –î–∞—Ç—ã.id = –ì—Ä—É–ø–ø—ã.–î–∞—Ç–∞_id AND –ì—Ä—É–ø–ø—ã.–ì—Ä—É–ø–ø–∞ = \'{group_name}\' AND –î–∞—Ç—ã.–î–∞—Ç–∞ = \'{schedule_date}\'))')
    start_time = cursor.fetchone()[0]
    cursor.execute(f'SELECT –í—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è FROM –ü–∞—Ä—ã WHERE id = (SELECT –ü–∞—Ä–∞_{i}_id FROM –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ WHERE id = (SELECT –î–∞—Ç—ã.–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_id FROM –î–∞—Ç—ã JOIN –ì—Ä—É–ø–ø—ã ON –î–∞—Ç—ã.id = –ì—Ä—É–ø–ø—ã.–î–∞—Ç–∞_id AND –ì—Ä—É–ø–ø—ã.–ì—Ä—É–ø–ø–∞ = \'{group_name}\' AND –î–∞—Ç—ã.–î–∞—Ç–∞ = \'{schedule_date}\'))')
    end_time = cursor.fetchone()[0]
    time_buttons.append(InlineKeyboardButton(text = f'{i}. {start_time}-{end_time}', callback_data = f'time_{i}'))
  return time_buttons


# –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
def get_discipline_buttons():
  global group_name
  global schedule_date
  discipline_buttons = [InlineKeyboardButton(text = "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", callback_data = "discipline_0")]
  for i in range(1, 7):
    cursor.execute(f'SELECT –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ FROM –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã WHERE id = (SELECT –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞_id FROM –ü–∞—Ä—ã WHERE id = (SELECT –ü–∞—Ä–∞_{i}_id FROM –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ WHERE id = (SELECT –î–∞—Ç—ã.–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_id FROM –î–∞—Ç—ã JOIN –ì—Ä—É–ø–ø—ã ON –î–∞—Ç—ã.id = –ì—Ä—É–ø–ø—ã.–î–∞—Ç–∞_id AND –ì—Ä—É–ø–ø—ã.–ì—Ä—É–ø–ø–∞ = \'{group_name}\' AND –î–∞—Ç—ã.–î–∞—Ç–∞ = \'{schedule_date}\')))')
    discipline = cursor.fetchone()
    if discipline == None:
      discipline_buttons.append(InlineKeyboardButton(text = " ", callback_data = f'discipline_0'))
    else:
      discipline_buttons.append(InlineKeyboardButton(text = discipline[0], callback_data = f'discipline_{i}'))
  return discipline_buttons


# –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
def get_teacher_buttons():
  global group_name
  global schedule_date
  teacher_buttons = [InlineKeyboardButton(text = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", callback_data = "teacher_0")]
  for i in range(1, 7):
    cursor.execute(f'SELECT –§–∞–º–∏–ª–∏—è FROM –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ WHERE id = (SELECT –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å_id FROM –ü–∞—Ä—ã WHERE id = (SELECT –ü–∞—Ä–∞_{i}_id FROM –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ WHERE id = (SELECT –î–∞—Ç—ã.–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_id FROM –î–∞—Ç—ã JOIN –ì—Ä—É–ø–ø—ã ON –î–∞—Ç—ã.id = –ì—Ä—É–ø–ø—ã.–î–∞—Ç–∞_id AND –ì—Ä—É–ø–ø—ã.–ì—Ä—É–ø–ø–∞ = \'{group_name}\' AND –î–∞—Ç—ã.–î–∞—Ç–∞ = \'{schedule_date}\')))')
    teacher_surname = cursor.fetchone()
    cursor.execute(f'SELECT –ò–º—è FROM –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ WHERE id = (SELECT –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å_id FROM –ü–∞—Ä—ã WHERE id = (SELECT –ü–∞—Ä–∞_{i}_id FROM –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ WHERE id = (SELECT –î–∞—Ç—ã.–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_id FROM –î–∞—Ç—ã JOIN –ì—Ä—É–ø–ø—ã ON –î–∞—Ç—ã.id = –ì—Ä—É–ø–ø—ã.–î–∞—Ç–∞_id AND –ì—Ä—É–ø–ø—ã.–ì—Ä—É–ø–ø–∞ = \'{group_name}\' AND –î–∞—Ç—ã.–î–∞—Ç–∞ = \'{schedule_date}\')))')
    teacher_name = cursor.fetchone()
    cursor.execute(f'SELECT –û—Ç—á–µ—Å—Ç–≤–æ FROM –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ WHERE id = (SELECT –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å_id FROM –ü–∞—Ä—ã WHERE id = (SELECT –ü–∞—Ä–∞_{i}_id FROM –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ WHERE id = (SELECT –î–∞—Ç—ã.–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_id FROM –î–∞—Ç—ã JOIN –ì—Ä—É–ø–ø—ã ON –î–∞—Ç—ã.id = –ì—Ä—É–ø–ø—ã.–î–∞—Ç–∞_id AND –ì—Ä—É–ø–ø—ã.–ì—Ä—É–ø–ø–∞ = \'{group_name}\' AND –î–∞—Ç—ã.–î–∞—Ç–∞ = \'{schedule_date}\')))')
    teacher_lastname = cursor.fetchone()
    if teacher_surname == None or teacher_name == None or teacher_lastname == None:
      teacher_buttons.append(InlineKeyboardButton(text = " ", callback_data = f'teacher_0'))
    else:
      teacher_buttons.append(InlineKeyboardButton(text = f'{teacher_surname[0]} {teacher_name[0][0]}. {teacher_lastname[0][0]}.', callback_data = f'teacher_{i}'))
  return teacher_buttons


# –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
def get_cabinet_buttons():
  global group_name
  global schedule_date
  cabinet_buttons = [InlineKeyboardButton(text = "–ê—É–¥–∏—Ç–æ—Ä–∏—è", callback_data = "cabinet_0")]
  for i in range(1, 7):
    cursor.execute(f'SELECT –ê—É–¥–∏—Ç–æ—Ä–∏—è FROM –ü–∞—Ä—ã WHERE id = (SELECT –ü–∞—Ä–∞_{i}_id FROM –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ WHERE id = (SELECT –î–∞—Ç—ã.–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_id FROM –î–∞—Ç—ã JOIN –ì—Ä—É–ø–ø—ã ON –î–∞—Ç—ã.id = –ì—Ä—É–ø–ø—ã.–î–∞—Ç–∞_id AND –ì—Ä—É–ø–ø—ã.–ì—Ä—É–ø–ø–∞ = \'{group_name}\' AND –î–∞—Ç—ã.–î–∞—Ç–∞ = \'{schedule_date}\'))')
    cabinet = cursor.fetchone()[0]
    if cabinet == None:
      cabinet_buttons.append(InlineKeyboardButton(text = " ", callback_data = f'cabinet_0'))
    else:
      cabinet_buttons.append(InlineKeyboardButton(text = cabinet, callback_data = f'cabinet_{i}'))
  return cabinet_buttons


# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–∑–º–µ—Ç–∫—É (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
def create_schedule():
  global group_name
  global schedule_date

  # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  kb = InlineKeyboardMarkup(row_width=5)

  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫

  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä
  time_buttons = get_time_buttons()

  # –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
  discipline_buttons = get_discipline_buttons()

  # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
  teacher_buttons = get_teacher_buttons()

  # –ö–∞–±–∏–Ω–µ—Ç—ã
  cabinet_buttons = get_cabinet_buttons()

  # # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–∑–º–µ—Ç–∫—É
  for i in range(7):
    kb.add(time_buttons[i], discipline_buttons[i], teacher_buttons[i], cabinet_buttons[i])

  return kb


# –í—ã–±–æ—Ä –¥–∞—Ç—ã
@dp.callback_query_handler(Datepicker.datepicker_callback.filter())
async def _process_datepicker(callback_query: CallbackQuery, callback_data: dict):
  global group_name
  global schedule_date
  datepicker = Datepicker(_get_datepicker_settings())
  _date = await datepicker.process(callback_query, callback_data)
  if _date:
    if group_name != None:
      schedule_date = _date.strftime("%Y-%m-%d")
      cursor.execute(f'SELECT –î–∞—Ç—ã.id FROM –î–∞—Ç—ã JOIN –ì—Ä—É–ø–ø—ã ON –î–∞—Ç—ã.id = –ì—Ä—É–ø–ø—ã.–î–∞—Ç–∞_id AND –ì—Ä—É–ø–ø—ã.–ì—Ä—É–ø–ø–∞ = \'{group_name}\' AND –î–∞—Ç—ã.–î–∞—Ç–∞ = \'{schedule_date}\'')
      schedule = cursor.fetchall()
      if len(schedule) == 0:
        await callback_query.message.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–∞ {schedule_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      else:
        await callback_query.message.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–∞ {schedule_date}:', reply_markup = create_schedule())
  await callback_query.answer()


# –ó–∞–ø—É—Å–∫ –¥–∞—Ç–∞-–ø–∏–∫–µ—Ä–∞
@dp.message_handler()
async def echo(message: Message):
  global group_name
  datepicker = Datepicker(_get_datepicker_settings())
  markup = datepicker.start_calendar()

  # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –≤ –±–¥
  cursor.execute(f'SELECT * FROM –ì—Ä—É–ø–ø—ã WHERE –ì—Ä—É–ø–ø–∞ = \'{message.text}\'')
  groups = cursor.fetchall()
  if len(groups) == 0:
    await message.answer(f'–ì—Ä—É–ø–ø–∞ {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–µ—Å–ª–∏ –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –±—É–∫–≤—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)')
  else:
    group_name = message.text
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É: ", reply_markup=markup)


if __name__ == "__main__":
  executor.start_polling(dp, skip_updates = True)


# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–¥
connection.close()